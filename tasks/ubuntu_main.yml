---
# tasks ubuntu_main.yml file

## Resize Disk Tasks ##
#
# Get disk free space info for resize block conditional check
- name: Determine free space on disk
  ansible.builtin.shell: "parted --script --fix {{ altbier_localenv_resize_dev }} unit GB print free | grep 'Free Space' | tail -n1 | awk '{print $3}' | sed 's/GB//'"
  become: True
  register: reg_resize_disk_free_gb
  changed_when: False
  when: 
  - altbier_localenv_resize_disk
#
# Block for disk resize with conditionals for distro, free space, etc.
- name: Resize Disk Block
  block:
    #
    # Get partition info for debugging
    - name: "Read disk {{ altbier_localenv_resize_dev }} information"
      community.general.parted: device={{ altbier_localenv_resize_dev }} unit=MiB
      register: reg_resize_disk_info
    #
    # Nested block for extending partition to rescue failure with brute force task
    - name: Extend Partition Block
      block:
        #
        # This is the correct way to resize a partition but seems to fail for my vagrant vms
        - name: Extend existing partition to fill all available space (nice way)
          community.general.parted:
            device: "{{ altbier_localenv_resize_dev }}"
            number: "{{ altbier_localenv_resize_part }}"
            part_end: "100%"
            resize: true
            state: present
          register: reg_resize_part_nice
      rescue:
        #
        # This is an ugly brute force way to resize a partition
        - name: Extend partition to fill all available space
          ansible.builtin.shell: "echo -e 'resizepart\n{{ altbier_localenv_resize_part }}\nYes\n100%\nprint free\nquit' | parted {{ altbier_localenv_resize_dev }} ---pretend-input-tty"
          register: reg_resize_part_force
    #
    # Extend the ext4 filesystem
    - name: Extend ext4 filesystem to fill all available space
      ansible.builtin.command: "resize2fs {{ altbier_localenv_resize_dev }}{{ altbier_localenv_resize_part }}"
      register: reg_resize_extfs
      when:
        - altbier_localenv_resize_fstype == "ext4"
    #
    # Extend the xfs filesystem
    - name: Extend xfs filesystem to fill all available space
      ansible.builtin.command: "xfs_growfs {{ altbier_localenv_resize_dev }}{{ altbier_localenv_resize_part }}"
      register: reg_resize_xfs
      when:
        - altbier_localenv_resize_fstype == "xfs"
  #
  # Resize disk block conditionals
  when: 
    - altbier_localenv_resize_disk
    - reg_resize_disk_free_gb is defined
    - reg_resize_disk_free_gb.stdout | int > 1
  # Block Priv
  become: True
  # Resize disk block Debugging
  always:
    #
    # Dump the output of block tasks if needed for troubleshooting
    - name: "Debug block tasks output"
      ansible.builtin.debug:
        msg:
        - "{{ omit if reg_resize_disk_info is not defined else reg_resize_disk_info }}"
        - "{{ omit if reg_resize_part_nice is not defined else reg_resize_part_nice}}"
        - "{{ omit if reg_resize_part_force is not defined else reg_resize_part_force}}"
        - "{{ omit if reg_resize_extfs is not defined else reg_resize_extfs}}"
        verbosity: 1
      when: 
        - altbier_localenv_resize_disk

## Package UPDATE
#
# update the apt cache and all installed packages if update true
- name: Update apt cache and all installed packages
  ansible.builtin.apt:
    name: '*'
    state: latest
    update_cache: True
    only_upgrade: True
  register: reg_pkg_update_result
  become: True
  when: 
    - altbier_localenv_pkg_update

#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    msg:
    - "{{ omit if reg_pkg_update_result is not defined else reg_pkg_update_result }}"
    verbosity: 1
  when: 
    - altbier_localenv_pkg_update

## INSTALL BUILD PKGS
#
# Install build packages
- name: Install build packages
  ansible.builtin.package:
    name: "{{ altbier_localenv_pkgs_build_list_ub }}"
    state: present
  register: reg_pkgs_build_result
  become: True
  when: altbier_localenv_pkgs_build_install
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_pkgs_build_result
    verbosity: 1
  become: True

## INSTALL QUALITY OF LIFE PKGS
#
# Install quality of life packages
- name: Install qol packages
  ansible.builtin.package:
    name: "{{ altbier_localenv_pkgs_qol_list_ub }}"
    state: present
  register: reg_pkgs_qol_result
  become: True
  when: altbier_localenv_pkgs_qol_install
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_pkgs_qol_result
    verbosity: 1
  become: True

## Custom color prompt
#
# Install custom color prompt
- name: Install custom color prompt to /etc/profile.d
  ansible.builtin.template:
    src: "setPS1.sh.j2"
    dest: "/etc/profile.d/setPS1.sh"
    owner: root
    group: root
    mode: "0555"
  become: True
  when: 
    - altbier_localenv_custom_color_prompt
#
# Fix ubuntu .bashrc files to allow use of above
- name: Disable default color prompt in .bashrc for user
  ansible.builtin.replace:
    path: "~/.bashrc"
    regexp: "PS1="
    replace: "cat /dev/null # DISABLED for setPS1.sh color prompt # PS1="
  become: False
- name: Disable default color prompt in .bashrc for root
  ansible.builtin.replace:
    path: "~/.bashrc"
    regexp: "PS1="
    replace: "cat /dev/null # DISABLED for setPS1.sh color prompt # PS1="
  become: True

## INSTALL PUTTY PKG FROM SOURCE
#
# Check if PuTTy is already installed
- name: Check if PuTTy is already installed.
  ansible.builtin.stat:
    path: "{{ altbier_localenv_pkgs_putty_bin }}"
  register: reg_pkgs_puttybin_result
  become: True
  when:
    - altbier_localenv_pkgs_putty_install
#
# Putty Install Block
- name: PuTTy Install Block
  block:
    #
    # Download putty source tarball
    - name: Download PuTTy source tarball
      ansible.builtin.get_url:
        url: "{{ altbier_localenv_pkgs_putty_url }}"
        dest: "{{ altbier_localenv_pkgs_putty_file }}"
      register: reg_pkgs_puttyurl_result
    #
    # Extract putty source tarball
    - name: Extract PuTTy source tarball
      ansible.builtin.unarchive:
        src: "{{ altbier_localenv_pkgs_putty_file }}"
        dest: "/tmp/"
        remote_src: yes
      register: reg_pkgs_puttytar_result
    #
    # Build putty from source and install
    - name: Run cmake in PuTTy source directory
      ansible.builtin.shell:
        cmd: cmake .; cmake --build .
        chdir: "{{ altbier_localenv_pkgs_putty_dir }}"
      register: reg_pkgs_puttycmake_result
    - name: Run cmake install in PuTTy source directory
      ansible.builtin.shell:
        cmd: cmake --build . --target install
        chdir: "{{ altbier_localenv_pkgs_putty_dir }}"
      register: reg_pkgs_puttycminstall_result
  # Putty Install Block Conditional
  become: True
  when:
    - altbier_localenv_pkgs_putty_install
    - not reg_pkgs_puttybin_result.stat.exists
  # Putty Install Block Debugging
  always:
    #
    # Dump the output of block tasks if needed for troubleshooting
    - name: "Debug block tasks output"
      ansible.builtin.debug:
        msg:
        - "{{ omit if reg_pkgs_puttyurl_result is not defined else reg_pkgs_puttyurl_result }}"
        - "{{ omit if reg_pkgs_puttytar_result is not defined else reg_pkgs_puttytar_result}}"
        - "{{ omit if reg_pkgs_puttycmake_result is not defined else reg_pkgs_puttycmake_result}}"
        - "{{ omit if reg_pkgs_puttycminstall_result is not defined else reg_pkgs_puttycminstall_result}}"
        verbosity: 1
      when:
        - altbier_localenv_pkgs_putty_install

## INSTALL ANSIBLE PKGS
#
# Install ansible and podman
- name: Install ansible-core and podman packages
  ansible.builtin.package:
    name:
      - ansible-core
      - podman
    state: present
  register: reg_pkgs_ans_result
  become: True
  when: 
    - altbier_localenv_pkgs_ansible_install
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_pkgs_ans_result
    verbosity: 1
#
# Install ansible-navigator pip
- name: Install ansible-navigator pip package
  ansible.builtin.pip:
    name: ansible-navigator
    extra_args: --break-system-packages
  register: reg_pkgs_ansn_result
  become: True
  when: 
    - altbier_localenv_pkgs_ansible_install
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_pkgs_ansn_result
    verbosity: 1
